services:
  # ---- 开发容器（热重载 / CGO / 依赖齐全）----
  app:
    build:
      context: .               # 以项目根目录为构建上下文
      target: dev              # 使用 Dockerfile 的 dev 阶段
    image: ancheymailtracker:dev         # 本地开发镜像名（可改）
    working_dir: /app
    volumes:
      - .:/app:cached          # 将当前项目挂载进容器（热重载依赖这个）
      - gocache:/go/pkg/mod    # Go module 缓存
      - gobuild:/root/.cache/go-build  # Go build 缓存
    env_file:
      - .env
      - .env.development
      - .env.dev.local
    ports:
      - "8080:8080"            # 暴露应用端口（与代码监听一致）
      - "2345:2345"            # 预留给 delve 远程调试（可删）
    # healthcheck 可选：确保容器就绪时才被视为 healthy（按你的健康检查接口调整）
    healthcheck:
      test: [ "CMD", "bash", "-c", "wget -qO- http://localhost:${PORT}/health || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # ---- 生产容器（使用 runtime 阶段构建出的精简镜像）----
  app-prod:
    build:
      context: .
      target: runtime          # 使用 Dockerfile 的 runtime 阶段
      # <<: *defaults
    image: ancheymailtracker:prod         # 生产镜像名（用于本机验证或推仓库）
    env_file:
      - .env
      - .env.dev.local
    ports:
      - "8080:8080"
    # 生产容器通常不需要挂源码卷
    restart: unless-stopped
    volumes:
      - ./data:/app/data:rw
volumes:
  gocache:
  gobuild:
